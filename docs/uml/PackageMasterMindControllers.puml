
@startuml

package mastermind.controllers {

    interface ControllerVisitor {
       visit(StartController startController): void
       visit(ProposalController proposalController): void
       visit(ResumeController resumeController): void
    }

    abstract class Controller {
        # Session session
        ~ Controller(Session session)
        + getValueState(): StateValue
    }

    enum FrameType {
        START
        STATE
        ADD_PROPOSAL
        GET_PROPOSAL
        GET_ATTEMPTS
        GET_RESULT
        UNDO
        REDO
        UNDOABLE
        REDOABLE
        NEXT_STATE
        RESUME
        LOOSER
        WINNER
        CLOSE
        + {static} parser(String string): FrameType
    }

    class Logic {
        # Session session
        # Map<StateValue, AcceptorController> controllers
        # Logic()
        + getController(): AcceptorController
    }

    abstract class ProposalController extends AcceptorController {
        + ProposalController(Session session)
        + abstract addProposedCombination(ProposedCombination proposedCombination): void
        + abstract isLooser(): boolean
        + abstract isWinner(): boolean
        + abstract getAttempts(): int
        + abstract getProposedCombination(int position): ProposedCombination
        + abstract getResult(int position): Result
        + abstract undo(): void
        + abstract isUndoable(): boolean
        + abstract redo(): void
        + abstract isRedoable(): boolean
        + abstract next(): void
        + accept(ControllerVisitor controllerVisitor): void
    }

    abstract class ResumeController extends AcceptorController {
        + ResumeController(Session session)
        + abstract resume(boolean newGame): void
        + accept(ControllerVisitor controllerVisitor): void
    }

    abstract class StartController extends AcceptorController {
        + StartController(Session session)
        + abstract resume(boolean newGame): void
        + accept(ControllerVisitor controllerVisitor): void
    }

    abstract class AcceptorController extends Controller {
        AcceptorController(Session session)
        + abstract accept(ControllerVisitor controllerVisitor): void
    }

    class UndoController extends Controller {
            - final SessionImplementation sessionImplementation
            + UndoController(Session session)
            + redo(): void
            + isRedoable(): boolean
        }

    class RedoController extends Controller {
        - final SessionImplementation sessionImplementation
        + RedoController(Session session)
        + redo(): void
        + isRedoable(): boolean
    }

}

package mastermind.models {
    class Session
    class StateValue
}


Controller *---> Session
AcceptorController *---> ControllerVisitor
Logic *---> Session
Logic *---> StateValue
Logic *---> AcceptorController


@enduml

@startuml

package mastermind.controllers.implementation {

    class LogicImplementation extends mastermind.controllers.Logic {
        # StartControllerImplementation startControllerImplementation
        # ProposalControllerImplementation proposalControllerImplementation
        # ResumeControllerImplementation resumeControllerImplementation
        + LogicImplementation();
    }

    class ProposalControllerImplementation extends mastermind.controllers.ProposalController {
        - final ActionController actionController
        - final UndoController undoController
        - final RedoController redoController
        ~ ProposalControllerImplementation(Session session)
        + addProposedCombination(ProposedCombination proposedCombination): void
        + isLooser(): boolean
        + isWinner(): boolean
        + getAttempts(): int
        + getProposedCombination(int position): ProposedCombination
        + getResult(int position): Result
        + undo(): void
        + isUndoable(): boolean
        + redo(): void
        + isRedoable(): boolean
        + next(): void
    }

    class ResumeControllerImplementation extends mastermind.controllers.ResumeController {
        ~ SessionImplementation sessionImplementation
        + ResumeControllerImplementation(Session session)
        + resume(boolean newGame): void
    }

    class StartControllerImplementation extends mastermind.controllers.StartController {
        ~ SessionImplementation sessionImplementation
        + StartControllerImplementation(Session session)
        + start(): void
    }

}

package mastermind.controllers {
    class Logic
}

package mastermind.models {
    class Session
    class ProposedCombination
}

LogicImplementation *---> StartControllerImplementation
LogicImplementation *---> ProposalControllerImplementation
LogicImplementation *---> ResumeControllerImplementation

ProposalControllerImplementation *---> Session
ProposalControllerImplementation *---> ProposedCombination
ResumeControllerImplementation *---> Session
StartControllerImplementation *---> Session

@enduml